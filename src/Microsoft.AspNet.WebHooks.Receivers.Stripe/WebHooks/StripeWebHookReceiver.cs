// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Controllers;
using Microsoft.AspNet.WebHooks.Properties;

namespace Microsoft.AspNet.WebHooks
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation which supports WebHooks generated by Stripe.
    /// Set the '<c>MS_WebHookReceiverSecret_Stripe</c>' application setting to the signing secret defined in Stripe.
    /// The corresponding WebHook URI is of the form '<c>https://&lt;host&gt;/api/webhooks/incoming/stripe/{id}</c>'.
    /// For details about Stripe WebHooks, see <c>https://stripe.com/docs/webhooks</c>. For details about Stripe
    /// signing secrets, see <see href="https://stripe.com/docs/webhooks#signatures"/>.
    /// </summary>
    public class StripeWebHookReceiver : WebHookReceiver
    {
        // Application setting to enable test mode
        internal const string PassThroughTestEvents = "MS_WebHookStripePassThroughTestEvents";

        internal const string RecName = "stripe";
        internal const string SignatureHeaderName = "Stripe-Signature";
        internal const string SignatureKey = "v1";
        internal const string TestId = "evt_00000000000000";
        internal const string TimestampKey = "t";

        internal const int SecretMinLength = 16;
        internal const int SecretMaxLength = 128;

        /// <summary>
        /// Gets the receiver name for this receiver.
        /// </summary>
        public static string ReceiverName => RecName;

        /// <inheritdoc />
        public override string Name => RecName;

        /// <inheritdoc />
        public override async Task<HttpResponseMessage> ReceiveAsync(
            string id,
            HttpRequestContext context,
            HttpRequestMessage request)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            if (request.Method == HttpMethod.Post)
            {
                var valid = await VerifySignature(request, id);
                if (!valid)
                {
                    return CreateBadSignatureResponse(request, SignatureHeaderName);
                }

                // Read the request entity body
                var data = await ReadAsJsonAsync(request);

                // Get notification ID
                var notificationId = data.Value<string>("id");
                var resolver = context.Configuration.DependencyResolver;
                if (string.IsNullOrEmpty(notificationId))
                {
                    var msg = string.Format(CultureInfo.CurrentCulture, StripeReceiverResources.Receiver_BadBody, "id");
                    resolver.GetLogger().Error(msg);
                    var badId = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                    return badId;
                }

                // Check whether this is a test event
                var testEvent = IsTestEvent(notificationId);

                // See if we should call handler in case of a test event or stop here.
                if (testEvent)
                {
                    var settings = resolver.GetSettings();
                    if (settings.IsTrue(PassThroughTestEvents))
                    {
                        resolver.GetLogger().Info(StripeReceiverResources.Receiver_TestEvent_Process);
                    }
                    else
                    {
                        resolver.GetLogger().Info(StripeReceiverResources.Receiver_TestEvent);
                        return request.CreateResponse();
                    }
                }

                // Call registered handlers
                var action = data.Value<string>("type");
                return await ExecuteWebHookAsync(id, context, request, new string[] { action }, data);
            }
            else
            {
                return CreateBadMethodResponse(request);
            }
        }

        internal static bool IsTestEvent(string notificationId)
        {
            return string.Equals(TestId, notificationId, StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// Verifies that the signature header matches that of the actual body.
        /// </summary>
        protected virtual async Task<bool> VerifySignature(HttpRequestMessage request, string id)
        {
            // 1. Ensure configuration for this receiver and id exists.
            var secretKey = await GetReceiverConfig(request, Name, id, SecretMinLength, SecretMaxLength);

            // 2. Get the timestamp and expected signatures from the signature header. Header is a comma-separated set
            // of key=value pairs.
            var signatureHeaderValue = GetRequestHeader(request, SignatureHeaderName);
            var pairs = signatureHeaderValue.SplitAndTrim(',');
            string timestamp = null;
            var expectedSignatures = new List<string>();
            foreach (var pair in pairs)
            {
                var keyValuePair = pair.SplitAndTrim('=');
                if (keyValuePair.Length != 2)
                {
                    var message = string.Format(
                        CultureInfo.CurrentCulture,
                        StripeReceiverResources.Receiver_InvalidHeaderFormat,
                        SignatureHeaderName);
                    request.GetConfiguration().DependencyResolver.GetLogger().Error(message);

                    var invalidHeader = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                    throw new HttpResponseException(invalidHeader);
                }

                if (!string.IsNullOrEmpty(keyValuePair[1]))
                {
                    if (string.Equals(keyValuePair[0], SignatureKey, StringComparison.OrdinalIgnoreCase))
                    {
                        expectedSignatures.Add(keyValuePair[1]);
                    }
                    else if (string.IsNullOrEmpty(timestamp) &&
                        string.Equals(keyValuePair[0], TimestampKey, StringComparison.OrdinalIgnoreCase))
                    {
                        timestamp = keyValuePair[1];
                    }
                }
            }

            if (string.IsNullOrEmpty(timestamp) || expectedSignatures.Count == 0)
            {
                var message = string.Format(
                    CultureInfo.CurrentCulture,
                    StripeReceiverResources.Receiver_HeaderMissingValue,
                    SignatureHeaderName,
                    TimestampKey,
                    SignatureKey);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(message);

                var invalidHeader = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                throw new HttpResponseException(invalidHeader);
            }

            // 3. Get the actual hash of the timestamp and request body.
            var secret = Encoding.UTF8.GetBytes(secretKey);
            var prefix = Encoding.UTF8.GetBytes(timestamp + ".");

            byte[] actualHash;
            using (var hasher = new HMACSHA256(secret))
            {
                hasher.TransformBlock(
                    inputBuffer: prefix,
                    inputOffset: 0,
                    inputCount: prefix.Length,
                    outputBuffer: null,
                    outputOffset: 0);

                var data = await request.Content.ReadAsByteArrayAsync();
                actualHash = hasher.ComputeHash(data);
            }

            // 4. Verify that the actual hash matches one of the expected hashes.
            foreach (var expectedSignature in expectedSignatures)
            {
                // While this looks repetitious compared to hex-encoding actualHash (once), a single v1 entry in the
                // header is the normal case. Expect multiple signatures only when rolling secret keys.
                byte[] expectedHash;
                try
                {
                    expectedHash = EncodingUtilities.FromHex(expectedSignature);
                }
                catch (Exception ex)
                {
                    var msg = string.Format(
                        CultureInfo.CurrentCulture,
                        StripeReceiverResources.Receiver_BadSignatureEncoding,
                        SignatureHeaderName,
                        SignatureKey);
                    request.GetConfiguration().DependencyResolver.GetLogger().Error(msg, ex);

                    var invalidEncoding = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                    throw new HttpResponseException(invalidEncoding);
                }

                if (SecretEqual(expectedHash, actualHash))
                {
                    return true;
                }
            }

            return false;
        }
    }
}
