<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EventConstraints_NoReceiverName" xml:space="preserve">
    <value>Invalid WebHook constraint configuration encountered. Request contained no receiver name and '{0}' should have disallowed the request.</value>
  </data>
  <data name="EventMapper_NoBodyProperty" xml:space="preserve">
    <value>A '{0}' WebHook request must contain a match for '{1}' in the HTTP request entity body indicating the type or types of event.</value>
  </data>
  <data name="General_ArgumentCannotBeNullOrEmpty" xml:space="preserve">
    <value>Value cannot be null or empty.</value>
  </data>
  <data name="General_InvalidEnumValue" xml:space="preserve">
    <value>Enum type '{0}' has no defined '{1}' value.</value>
  </data>
  <data name="General_NoQueryParameter" xml:space="preserve">
    <value>A '{0}' WebHook request must contain a '{1}' query parameter.</value>
  </data>
  <data name="GetRequest_NoQueryParameter" xml:space="preserve">
    <value>A '{0}' WebHook verification request must contain a '{1}' query parameter.</value>
  </data>
  <data name="PropertyProvider_ConflictingMetadataServices" xml:space="preserve">
    <value>Invalid metadata services found for the '{0}' WebHook receiver. Receivers must not provide both '{1}' and '{2}' services.</value>
  </data>
  <data name="PropertyProvider_DuplicateMetadata" xml:space="preserve">
    <value>Invalid metadata services found for the '{0}' WebHook receiver. Receivers must not have more than one '{1}' registration.</value>
  </data>
  <data name="PropertyProvider_MissingMetadata" xml:space="preserve">
    <value>Invalid metadata services found for the '{0}' WebHook receiver. Receiver must have an '{1}' implementation.</value>
  </data>
  <data name="PropertyProvider_MissingMetadataServices" xml:space="preserve">
    <value>Invalid metadata services found for the '{0}' WebHook receiver. Receivers with attributes implementing '{1}' must also provide a '{2}' service.</value>
  </data>
  <data name="RequestReader_ModelBindingFailed" xml:space="preserve">
    <value>The MVC model binding system failed. Model state is valid but model was not set.</value>
  </data>
  <data name="Security_BadSecret" xml:space="preserve">
    <value>Could not find a valid configuration for the '{0}' WebHook receiver, instance '{1}'. The value must be at least {2} characters long.</value>
  </data>
  <data name="Security_NoHttps" xml:space="preserve">
    <value>The '{0}' WebHook receiver requires {1} in order to be secure. Register a WebHook URI of type '{2}'.</value>
  </data>
  <data name="Security_NoSecrets" xml:space="preserve">
    <value>Could not find a valid configuration for the '{0}' WebHook receiver. Configure secret keys for this receiver.</value>
  </data>
  <data name="SelectorModelProvider_MixedRouteWithWebHookAttribute" xml:space="preserve">
    <value>'{0}' and '{1}' were applied to the same action. '{2}' must not be combined with attribute routing or non-WebHook constraints.</value>
  </data>
  <data name="VerifyBody_NoFormData" xml:space="preserve">
    <value>The '{0}' WebHook receiver does not support content type '{1}'. The WebHook request must contain an entity body formatted as HTML form URL-encoded data.</value>
  </data>
  <data name="VerifyBody_NoJson" xml:space="preserve">
    <value>The '{0}' WebHook receiver does not support content type '{1}'. The WebHook request must contain an entity body formatted as JSON.</value>
  </data>
  <data name="VerifyBody_NoXml" xml:space="preserve">
    <value>The '{0}' WebHook receiver does not support content type '{1}'. The WebHook request must contain an entity body formatted as XML.</value>
  </data>
  <data name="VerifyCode_BadCode" xml:space="preserve">
    <value>The '{0}' query parameter provided in the HTTP request did not match the expected value.</value>
  </data>
  <data name="VerifyMethod_BadBody" xml:space="preserve">
    <value>The '{0}' WebHook receiver does not support an empty request body.</value>
  </data>
  <data name="VerifyMethod_BadMethod" xml:space="preserve">
    <value>The '{0}' WebHook receiver does not support the HTTP '{1}' method.</value>
  </data>
  <data name="VerifyRequiredValue_NoHeader" xml:space="preserve">
    <value>A '{0}' WebHook request must contain a '{1}' HTTP header.</value>
  </data>
  <data name="VerifyRequiredValue_NoRouteValue" xml:space="preserve">
    <value>A '{0}' WebHook request must contain a '{1}' value in the route data.</value>
  </data>
  <data name="VerifySignature_BadBase64Encoding" xml:space="preserve">
    <value>The '{0}' header value is invalid. The '{1}' WebHook receiver requires a valid Base64-encoded string.</value>
  </data>
  <data name="VerifySignature_BadHeader" xml:space="preserve">
    <value>Expecting exactly one '{0}' header field in the WebHook request but found {1}. Ensure the request contains exactly one '{0}' header field.</value>
  </data>
  <data name="VerifySignature_BadHexEncoding" xml:space="preserve">
    <value>The '{0}' header value is invalid. The '{1}' WebHook receiver requires a valid hex-encoded string.</value>
  </data>
  <data name="VerifySignature_BadSignature" xml:space="preserve">
    <value>The signature provided by the '{0}' header field does not match the value expected by the '{1}' WebHook receiver. WebHook request is invalid.</value>
  </data>
</root>