<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Config_AddedName" xml:space="preserve">
    <value>Registered configuration setting '{0}' for ID '{1}''.</value>
  </data>
  <data name="Config_AddFailure" xml:space="preserve">
    <value>Could not add configuration for receiver '{0}' and id '{1}': {2}</value>
  </data>
  <data name="Config_BadValue" xml:space="preserve">
    <value>The '{0}' application setting must have a comma-separated value of one or more secrets of the form &lt;secret&gt; or &lt;id&gt;=&lt;secret&gt;.</value>
  </data>
  <data name="Config_NoConfig" xml:space="preserve">
    <value>Did not find any applications settings of the form '{0}'. To receive WebHooks, please add corresponding applications settings.</value>
  </data>
  <data name="Manager_MultipleAmbiguousReceiversFound" xml:space="preserve">
    <value>Multiple types were found that match the WebHook receiver named '{0}'. This can happen if multiple receivers are defined with the same name but different casing which is not supported. The request for '{0}' has found the following matching receivers: {1}{2}.</value>
  </data>
  <data name="Manager_UnknownReceiver" xml:space="preserve">
    <value>No WebHook receiver has been registered with the name '{0}'. Please use one of the registered receivers.</value>
  </data>
  <data name="QueueHandler_EnqueueError" xml:space="preserve">
    <value>Could not enqueue WebHook: {0}</value>
  </data>
  <data name="ReceiverController_Failure" xml:space="preserve">
    <value>WebHook receiver '{0}' could not process WebHook due to error: {1}</value>
  </data>
  <data name="ReceiverController_Processing" xml:space="preserve">
    <value>Processing incoming WebHook request with receiver '{0}' and id '{1}'.</value>
  </data>
  <data name="ReceiverController_Unknown" xml:space="preserve">
    <value>No WebHook receiver is registered with the name '{0}'.</value>
  </data>
  <data name="Receiver_BadCode" xml:space="preserve">
    <value>The '{0}' query parameter provided in the HTTP request did not match the expected value.</value>
  </data>
  <data name="Receiver_BadFormData" xml:space="preserve">
    <value>The WebHook request contained invalid HTML form URL-encoded data: '{0}'.</value>
  </data>
  <data name="Receiver_BadHeader" xml:space="preserve">
    <value>Expecting exactly one '{0}' header field in the WebHook request but found {1}. Please ensure that the request contains exactly one '{0}' header field.</value>
  </data>
  <data name="Receiver_BadJson" xml:space="preserve">
    <value>The WebHook request contained invalid JSON: '{0}'.</value>
  </data>
  <data name="Receiver_BadMethod" xml:space="preserve">
    <value>The HTTP '{0}' method is not supported by the '{1}' WebHook receiver.</value>
  </data>
  <data name="Receiver_BadSecret" xml:space="preserve">
    <value>Could not find a valid configuration for WebHook receiver '{0}' and instance '{1}'. The setting must be set to a value between {2} and {3} characters long.</value>
  </data>
  <data name="Receiver_BadSignature" xml:space="preserve">
    <value>The WebHook signature provided by the '{0}' header field does not match the value expected by the '{1}' receiver. WebHook request is invalid.</value>
  </data>
  <data name="Receiver_BadXml" xml:space="preserve">
    <value>The WebHook request contained invalid XML: '{0}'.</value>
  </data>
  <data name="Receiver_NoBody" xml:space="preserve">
    <value>The WebHook request entity body cannot be empty.</value>
  </data>
  <data name="Receiver_NoCode" xml:space="preserve">
    <value>The WebHook verification request must contain a '{0}' query parameter.</value>
  </data>
  <data name="Receiver_NoFormData" xml:space="preserve">
    <value>The WebHook request must contain an entity body formatted as HTML form URL-encoded data.</value>
  </data>
  <data name="Receiver_NoHttps" xml:space="preserve">
    <value>The WebHook receiver '{0}' requires HTTPS in order to be secure. Please register a WebHook URI of type '{1}'.</value>
  </data>
  <data name="Receiver_NoJson" xml:space="preserve">
    <value>The WebHook request must contain an entity body formatted as JSON.</value>
  </data>
  <data name="Receiver_NoXml" xml:space="preserve">
    <value>The WebHook request must contain an entity body formatted as XML.</value>
  </data>
  <data name="Manager_RegisteredNames" xml:space="preserve">
    <value>Registered '{0}' instances with the following names: {1}.</value>
  </data>
  <data name="GetDataOrDefault_Failure" xml:space="preserve">
    <value>Could not deserialize instance of type '{0}' as '{1}': {2}</value>
  </data>
</root>