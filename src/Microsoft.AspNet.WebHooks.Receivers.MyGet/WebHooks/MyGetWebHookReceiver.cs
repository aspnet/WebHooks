// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Globalization;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http.Controllers;
using Microsoft.AspNet.WebHooks.Properties;
using Newtonsoft.Json.Linq;

namespace Microsoft.AspNet.WebHooks
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation which supports WebHooks generated by MyGet. 
    /// For details about MyGet WebHooks, see <c>http://docs.myget.org/docs/reference/webhooks</c>.
    /// </summary>
    public class MyGetWebHookReceiver : WebHookReceiver
    {
        internal const string ReceiverName = "myget";

        internal const string PayloadTypePropertyName = "PayloadType";
        internal const string PingPayload = "PingPayload";

        /// <inheritdoc />
        public override string Name
        {
            get { return ReceiverName; }
        }

        /// <inheritdoc />
        public override async Task<HttpResponseMessage> ReceiveAsync(string id, HttpRequestContext context, HttpRequestMessage request)
        {
            if (id == null)
            {
                throw new ArgumentNullException("id");
            }
            if (context == null)
            {
                throw new ArgumentNullException("context");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }

            if (request.Method == HttpMethod.Post)
            {                
                // Read the request entity body.
                JObject data = await ReadAsJsonAsync(request);

                // Read the action from data
                JToken action;
                string actionAsString;
                if (!data.TryGetValue(PayloadTypePropertyName, out action))
                {
                    string msg = string.Format(CultureInfo.CurrentCulture, MyGetReceiverResources.Receiver_NoEvent, PayloadTypePropertyName);
                    context.Configuration.DependencyResolver.GetLogger().Error(msg);
                    HttpResponseMessage noPayloadType = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                    return noPayloadType;
                }
                else
                {
                    actionAsString = action.Value<string>();
                }
                
                // If this is a ping request then just return. Otherwise call handlers.
                if (string.Equals(actionAsString, PingPayload, StringComparison.OrdinalIgnoreCase))
                {
                    return request.CreateResponse();
                }
                return await ExecuteWebHookAsync(id, context, request, new[] { actionAsString }, data);
            }

            return CreateBadMethodResponse(request);
        }
    }
}
