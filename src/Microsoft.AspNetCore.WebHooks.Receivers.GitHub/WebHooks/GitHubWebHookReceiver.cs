// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Internal;       // ??? Buffering helper is pub-Internal.
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Internal;        // ??? IHttpRequestStreamReaderFactory is pub-Internal.
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.WebHooks.Properties;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace Microsoft.AspNetCore.WebHooks
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation which supports WebHooks generated by GitHub.
    /// Set the '<c>MS_WebHookReceiverSecret_GitHub</c>' application setting to the application secrets, optionally using IDs
    /// to differentiate between multiple WebHooks, for example '<c>secret0, id1=secret1, id2=secret2</c>'.
    /// The corresponding WebHook URI is of the form '<c>https://&lt;host&gt;/api/webhooks/incoming/github/{id}</c>'.
    /// For details about GitHub WebHooks, see <c>https://developer.github.com/webhooks/</c>.
    /// </summary>
    public class GitHubWebHookReceiver : WebHookReceiver
    {
        internal const string RecName = "github";
        internal const int SecretMinLength = 16;
        internal const int SecretMaxLength = 128;

        internal const string SignatureHeaderKey = "sha1";
        internal const string SignatureHeaderValueTemplate = SignatureHeaderKey + "={0}";
        internal const string SignatureHeaderName = "X-Hub-Signature";
        internal const string EventHeaderName = "X-Github-Event";
        internal const string PingEvent = "ping";

        public GitHubWebHookReceiver(
            IConfiguration configuration,
            IWebHookHandlerManager handlerManager,
            ILoggerFactory loggerFactory,
            IModelMetadataProvider metadataProvider,
            IOptions<MvcOptions> optionsAccessor,
            IHttpRequestStreamReaderFactory readerFactory,
            IWebHookReceiverConfig receiverConfig)
            : base(configuration, handlerManager, loggerFactory, metadataProvider, optionsAccessor, readerFactory, receiverConfig)
        {
        }

        /// <summary>
        /// Gets the receiver name for this receiver.
        /// </summary>
        public static string ReceiverName
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override string Name
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override async Task<IActionResult> ReceiveAsync(string id, HttpContext context, ModelStateDictionary modelState)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }
            if (modelState == null)
            {
                throw new ArgumentNullException(nameof(modelState));
            }

            var request = context.Request;
            if (string.Equals(request.Method, "post", StringComparison.OrdinalIgnoreCase))
            {
                var result = await VerifySignature(id, request, modelState);
                if (result != null || !modelState.IsValid)
                {
                    return result;
                }

                // Read the request entity body.
                var data = await ReadAsJsonAsync(request, modelState);
                if (!modelState.IsValid)
                {
                    return null;
                }

                // Pick out action from headers
                if (!request.Headers.TryGetValue(EventHeaderName, out var actions))
                {
                    Logger.LogError(
                        0,
                        "The WebHook request must contain a '{HeaderName}' HTTP header indicating the type of event.",
                        EventHeaderName);

                    var msg = string.Format(CultureInfo.CurrentCulture, GitHubReceiverResources.Receiver_NoEvent, EventHeaderName);
                    var noHeader = CreateErrorResult(StatusCodes.Status400BadRequest, msg);
                    return noHeader;
                }

                // If this is a ping request then just return. Otherwise call handlers.
                if (string.Equals(actions.FirstOrDefault(), PingEvent, StringComparison.OrdinalIgnoreCase))
                {
                    Logger.LogInformation(1, "Received a GitHub Ping Event -- ignoring.");

                    return null;
                }

                return await ExecuteWebHookAsync(id, context, request, actions, data);
            }
            else
            {
                return CreateBadMethodResult(request);
            }
        }

        /// <summary>
        /// Verifies that the signature header matches that of the actual body.
        /// </summary>
        protected virtual async Task<IActionResult> VerifySignature(string id, HttpRequest request, ModelStateDictionary modelState)
        {
            var secretKey = await GetReceiverConfig(request, Name, id, SecretMinLength, SecretMaxLength);

            // Get the expected hash from the signature header
            var header = GetRequestHeader(request, SignatureHeaderName, modelState);
            if (!modelState.IsValid)
            {
                return null;
            }

            var values = header.SplitAndTrim('=');
            if (values.Length != 2 || !string.Equals(values[0], SignatureHeaderKey, StringComparison.OrdinalIgnoreCase))
            {
                Logger.LogError(
                    2,
                    "Invalid '{HeaderName}' header value. Expecting a value of '{Key}={Value}'.",
                    SignatureHeaderName,
                    SignatureHeaderKey,
                    "<value>");

                var msg = string.Format(CultureInfo.CurrentCulture, GitHubReceiverResources.Receiver_BadHeaderValue, SignatureHeaderName, SignatureHeaderKey, "<value>");
                var invalidHeader = CreateErrorResult(StatusCodes.Status400BadRequest, msg);
                return invalidHeader;
            }

            byte[] expectedHash;
            try
            {
                expectedHash = EncodingUtilities.FromHex(values[1]);
            }
            catch (Exception ex)
            {
                Logger.LogError(
                    3,
                    ex,
                    "The '{HeaderName}' header value is invalid. It must be a valid hex-encoded string.",
                    SignatureHeaderName);

                var msg = string.Format(CultureInfo.CurrentCulture, GitHubReceiverResources.Receiver_BadHeaderEncoding, SignatureHeaderName);
                var invalidEncoding = CreateErrorResult(StatusCodes.Status400BadRequest, msg);
                return invalidEncoding;
            }

            // Ensure we can read body without messing up JSON etc. deserialization; body will be read at least twice.
            if (!request.Body.CanSeek)
            {
                BufferingHelper.EnableRewind(request);
                Debug.Assert(request.Body.CanSeek);

                await request.Body.DrainAsync(CancellationToken.None);
            }

            // Always start at the beginning.
            request.Body.Seek(0L, SeekOrigin.Begin);

            // Get the actual hash of the request body
            byte[] actualHash;
            var secret = Encoding.UTF8.GetBytes(secretKey);
            using (var hasher = new HMACSHA1(secret))
            {
                // TODO: Handle (error) case where ContentLength > int.MaxValue.
                var length = (int)(request.ContentLength ?? request.Body.Length);
                var data = new byte[length];

                // TODO: This is a common pattern in WebHooks receivers; likely need ReadAsBytesAsync() somewhere.
                try
                {
                    var offset = 0;
                    while (offset < length)
                    {
                        offset += await request.Body.ReadAsync(data, offset, count: length - offset);
                    }
                }
                finally
                {
                    // Reset Position because JsonInputFormatter et cetera always start from current position.
                    request.Body.Seek(0L, SeekOrigin.Begin);
                }

                actualHash = hasher.ComputeHash(data);
            }

            // Now verify that the provided hash matches the expected hash.
            if (!WebHookReceiver.SecretEqual(expectedHash, actualHash))
            {
                var badSignature = CreateBadSignatureResult(request, SignatureHeaderName);
                return badSignature;
            }

            return null;
        }
    }
}
